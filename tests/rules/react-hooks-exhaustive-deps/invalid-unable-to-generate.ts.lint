              function MyComponent(props) {
                const value = useMemo(() => { return 2*2; });
                              ~~~~~~~ [React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?]
                const fn = useCallback(() => { alert('foo'); });
                           ~~~~~~~~~~~ [React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?]
              }



              function MyComponent({ foo, bar, baz }) {
                useEffect(() => {
                  console.log(foo, bar, baz);
                }, ['foo', 'bar']);
                   ~~~~~~~~~~~~~~ [React Hook useEffect has missing dependencies: 'bar', 'baz', and 'foo'. Either include them or remove the dependency array.]
                    ~~~~~ [The 'foo' literal is not a valid dependency because it never changes. Did you mean to include foo in the array instead?]
                           ~~~~~ [The 'bar' literal is not a valid dependency because it never changes. Did you mean to include bar in the array instead?]
              }



              function MyComponent({ foo, bar, baz }) {
                useEffect(() => {
                  console.log(foo, bar, baz);
                }, [42, false, null]);
                   ~~~~~~~~~~~~~~~~~ [React Hook useEffect has missing dependencies: 'bar', 'baz', and 'foo'. Either include them or remove the dependency array.]
                    ~~ [The 42 literal is not a valid dependency because it never changes. You can safely remove it.]
                        ~~~~~ [The false literal is not a valid dependency because it never changes. You can safely remove it.]
                               ~~~~ [The null literal is not a valid dependency because it never changes. You can safely remove it.]
              }



              function MyComponent() {
                const local = {};
                const dependencies = [local];
                useEffect(() => {
                  console.log(local);
                }, dependencies);
                   ~~~~~~~~~~~~ [React Hook useEffect was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.]
                   ~~~~~~~~~~~~ [React Hook useEffect has a missing dependency: 'local'. Either include it or remove the dependency array.]
              }



              function MyComponent() {
                const local = {};
                const dependencies = [local];
                useEffect(() => {
                  console.log(local);
                }, [...dependencies]);
                   ~~~~~~~~~~~~~~~~~ [React Hook useEffect has a missing dependency: 'local'. Either include it or remove the dependency array.]
                    ~~~~~~~~~~~~~~~ [React Hook useEffect has a spread element in its dependency array. This means we can't statically verify whether you've passed the correct dependencies.]
              }



              function MyComponent() {
                const local = {};
                useEffect(() => {
                  console.log(local);
                }, [computeCacheKey(local)]);
                   ~~~~~~~~~~~~~~~~~~~~~~~~ [React Hook useEffect has a missing dependency: 'local'. Either include it or remove the dependency array.]
                    ~~~~~~~~~~~~~~~~~~~~~~ [React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.]
              }



              function MyComponent(props) {
                useEffect(() => {
                  console.log(props.items[0]);
                }, [props.items[0]]);
                   ~~~~~~~~~~~~~~~~ [React Hook useEffect has a missing dependency: 'props.items'. Either include it or remove the dependency array.]
                    ~~~~~~~~~~~~~~ [React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.]
              }



              function MyComponent({ items }) {
                useEffect(() => {
                  console.log(items[0]);
                }, [items[0]]);
                   ~~~~~~~~~~ [React Hook useEffect has a missing dependency: 'items'. Either include it or remove the dependency array.]
                    ~~~~~~~~ [React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.]
              }



              function MyComponent(props) {
                useEffect(() => {
                  console.log(props.foo);
                }, []);
                   ~~ [React Hook useEffect has a missing dependency: 'props.foo'. Either include it or remove the dependency array.]
                useCallback(() => {
                  console.log(props.foo);
                }, []);
                   ~~ [React Hook useCallback has a missing dependency: 'props.foo'. Either include it or remove the dependency array.]
                useMemo(() => {
                  console.log(props.foo);
                }, []);
                   ~~ [React Hook useMemo has a missing dependency: 'props.foo'. Either include it or remove the dependency array.]
                React.useEffect(() => {
                  console.log(props.foo);
                }, []);
                   ~~ [React Hook React.useEffect has a missing dependency: 'props.foo'. Either include it or remove the dependency array.]
                React.useCallback(() => {
                  console.log(props.foo);
                }, []);
                   ~~ [React Hook React.useCallback has a missing dependency: 'props.foo'. Either include it or remove the dependency array.]
                React.useMemo(() => {
                  console.log(props.foo);
                }, []);
                   ~~ [React Hook React.useMemo has a missing dependency: 'props.foo'. Either include it or remove the dependency array.]
                React.notReactiveHook(() => {
                  console.log(props.foo);
                }, []);
              }



              function MyComponent(props) {
                useCustomEffect(() => {
                  console.log(props.foo);
                }, []);
                   ~~ [React Hook useCustomEffect has a missing dependency: 'props.foo'. Either include it or remove the dependency array.]
                useEffect(() => {
                  console.log(props.foo);
                }, []);
                   ~~ [React Hook useEffect has a missing dependency: 'props.foo'. Either include it or remove the dependency array.]
                React.useEffect(() => {
                  console.log(props.foo);
                }, []);
                   ~~ [React Hook React.useEffect has a missing dependency: 'props.foo'. Either include it or remove the dependency array.]
                React.useCustomEffect(() => {
                  console.log(props.foo);
                }, []);
              }



              function MyComponent() {
                const local = {};
                useEffect(() => {
                  console.log(local);
                }, [a ? local : b]);
                   ~~~~~~~~~~~~~~~ [React Hook useEffect has a missing dependency: 'local'. Either include it or remove the dependency array.]
                    ~~~~~~~~~~~~~ [React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.]
              }



              function MyComponent() {
                const local = {};
                useEffect(() => {
                  console.log(local);
                }, [a && local]);
                   ~~~~~~~~~~~~ [React Hook useEffect has a missing dependency: 'local'. Either include it or remove the dependency array.]
                    ~~~~~~~~~~ [React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.]
              }



              function MyComponent(props) {
                let value;
                let value2;
                let value3;
                let value4;
                let asyncValue;
                useEffect(() => {
                  if (value4) {
                    value = {};
                  }
                  value2 = 100;
                           ~~~ [Assignments to the 'value2' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.]
                  value = 43;
                          ~~ [Assignments to the 'value' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.]
                  value4 = true;
                           ~~~~ [Assignments to the 'value4' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.]
                  console.log(value2);
                  console.log(value3);
                  setTimeout(() => {
                    asyncValue = 100;
                                 ~~~ [Assignments to the 'asyncValue' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.]
                  });
                }, []);
              }



              function MyComponent(props) {
                let value;
                let value2;
                let value3;
                let asyncValue;
                useEffect(() => {
                  value = {};
                          ~~ [Assignments to the 'value' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.]
                  value2 = 100;
                           ~~~ [Assignments to the 'value2' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.]
                  value = 43;
                  console.log(value2);
                  console.log(value3);
                  setTimeout(() => {
                    asyncValue = 100;
                                 ~~~ [Assignments to the 'asyncValue' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.]
                  });
                }, [value, value2, value3]);
              }



              function MyComponent(props) {
                let [, setState] = useState();
                let [, dispatch] = React.useReducer();
                let taint = props.foo;

                function handleNext1(value) {
                  let value2 = value * taint;
                  setState(value2);
                  console.log('hello');
                }
                const handleNext2 = (value) => {
                  setState(taint(value));
                  console.log('hello');
                };
                let handleNext3 = function(value) {
                  setTimeout(() => console.log(taint));
                  dispatch({ type: 'x', value });
                };
                useEffect(() => {
                  return Store.subscribe(handleNext1);
                }, []);
                   ~~ [React Hook useEffect has a missing dependency: 'handleNext1'. Either include it or remove the dependency array.]
                useLayoutEffect(() => {
                  return Store.subscribe(handleNext2);
                }, []);
                   ~~ [React Hook useLayoutEffect has a missing dependency: 'handleNext2'. Either include it or remove the dependency array.]
                useMemo(() => {
                  return Store.subscribe(handleNext3);
                }, []);
                   ~~ [React Hook useMemo has a missing dependency: 'handleNext3'. Either include it or remove the dependency array.]
              }



              function MyComponent(props) {
                let [, setState] = useState();
                let [, dispatch] = React.useReducer();
                let taint = props.foo;

                // Shouldn't affect anything
                function handleChange() {}

                function handleNext1(value) {
                  let value2 = value * taint;
                  setState(value2);
                  console.log('hello');
                }
                const handleNext2 = (value) => {
                  setState(taint(value));
                  console.log('hello');
                };
                let handleNext3 = function(value) {
                  console.log(taint);
                  dispatch({ type: 'x', value });
                };
                useEffect(() => {
                  return Store.subscribe(handleNext1);
                }, []);
                   ~~ [React Hook useEffect has a missing dependency: 'handleNext1'. Either include it or remove the dependency array.]
                useLayoutEffect(() => {
                  return Store.subscribe(handleNext2);
                }, []);
                   ~~ [React Hook useLayoutEffect has a missing dependency: 'handleNext2'. Either include it or remove the dependency array.]
                useMemo(() => {
                  return Store.subscribe(handleNext3);
                }, []);
                   ~~ [React Hook useMemo has a missing dependency: 'handleNext3'. Either include it or remove the dependency array.]
              }



              function MyComponent(props) {
                let [, setState] = useState();
                let [, dispatch] = React.useReducer();
                let taint = props.foo;

                // Shouldn't affect anything
                const handleChange = () => {};

                function handleNext1(value) {
                  let value2 = value * taint;
                  setState(value2);
                  console.log('hello');
                }
                const handleNext2 = (value) => {
                  setState(taint(value));
                  console.log('hello');
                };
                let handleNext3 = function(value) {
                  console.log(taint);
                  dispatch({ type: 'x', value });
                };
                useEffect(() => {
                  return Store.subscribe(handleNext1);
                }, []);
                   ~~ [React Hook useEffect has a missing dependency: 'handleNext1'. Either include it or remove the dependency array.]
                useLayoutEffect(() => {
                  return Store.subscribe(handleNext2);
                }, []);
                   ~~ [React Hook useLayoutEffect has a missing dependency: 'handleNext2'. Either include it or remove the dependency array.]
                useMemo(() => {
                  return Store.subscribe(handleNext3);
                }, []);
                   ~~ [React Hook useMemo has a missing dependency: 'handleNext3'. Either include it or remove the dependency array.]
              }



              function MyComponent(props) {
                let [, setState] = useState();

                function handleNext(value) {
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  setState(value);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                }
~~~~~~~~~~~~~~~~~ [The 'handleNext' function makes the dependencies of useEffect Hook (at line 279) change on every render. Move it inside the useEffect callback. Alternatively, wrap the 'handleNext' definition into its own useCallback() Hook.]

                useEffect(() => {
                  return Store.subscribe(handleNext);
                }, [handleNext]);
              }



              function MyComponent(props) {
                let [, setState] = useState();

                const handleNext = (value) => {
                      ~~~~~~~~~~~~~~~~~~~~~~~~~
                  setState(value);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                };
~~~~~~~~~~~~~~~~~ [The 'handleNext' function makes the dependencies of useEffect Hook (at line 293) change on every render. Move it inside the useEffect callback. Alternatively, wrap the 'handleNext' definition into its own useCallback() Hook.]

                useEffect(() => {
                  return Store.subscribe(handleNext);
                }, [handleNext]);
              }



              function MyComponent(props) {
                let [, setState] = useState();

                const handleNext = (value) => {
                      ~~~~~~~~~~~~~~~~~~~~~~~~~
                  setState(value);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                };
~~~~~~~~~~~~~~~~~ [The 'handleNext' function makes the dependencies of useEffect Hook (at line 307) change on every render. To fix this, wrap the 'handleNext' definition into its own useCallback() Hook.]

                useEffect(() => {
                  return Store.subscribe(handleNext);
                }, [handleNext]);

                return <div onClick={handleNext} />;
              }



              function MyComponent(props) {
                function handleNext1() {
                ~~~~~~~~~~~~~~~~~~~~~~~~
                  console.log('hello');
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                }
~~~~~~~~~~~~~~~~~ [The 'handleNext1' function makes the dependencies of useEffect Hook (at line 326) change on every render. Move it inside the useEffect callback. Alternatively, wrap the 'handleNext1' definition into its own useCallback() Hook.]
                const handleNext2 = () => {
                      ~~~~~~~~~~~~~~~~~~~~~
                  console.log('hello');
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                };
~~~~~~~~~~~~~~~~~ [The 'handleNext2' function makes the dependencies of useLayoutEffect Hook (at line 329) change on every render. Move it inside the useLayoutEffect callback. Alternatively, wrap the 'handleNext2' definition into its own useCallback() Hook.]
                let handleNext3 = function() {
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~
                  console.log('hello');
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                };
~~~~~~~~~~~~~~~~~ [The 'handleNext3' function makes the dependencies of useMemo Hook (at line 332) change on every render. Move it inside the useMemo callback. Alternatively, wrap the 'handleNext3' definition into its own useCallback() Hook.]
                useEffect(() => {
                  return Store.subscribe(handleNext1);
                }, [handleNext1]);
                useLayoutEffect(() => {
                  return Store.subscribe(handleNext2);
                }, [handleNext2]);
                useMemo(() => {
                  return Store.subscribe(handleNext3);
                }, [handleNext3]);
              }



              function MyComponent(props) {
                function handleNext1() {
                ~~~~~~~~~~~~~~~~~~~~~~~~
                  console.log('hello');
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                }
~~~~~~~~~~~~~~~~~ [The 'handleNext1' function makes the dependencies of useEffect Hook (at line 350) change on every render. Move it inside the useEffect callback. Alternatively, wrap the 'handleNext1' definition into its own useCallback() Hook.]
                const handleNext2 = () => {
                      ~~~~~~~~~~~~~~~~~~~~~
                  console.log('hello');
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                };
~~~~~~~~~~~~~~~~~ [The 'handleNext2' function makes the dependencies of useLayoutEffect Hook (at line 354) change on every render. Move it inside the useLayoutEffect callback. Alternatively, wrap the 'handleNext2' definition into its own useCallback() Hook.]
                let handleNext3 = function() {
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~
                  console.log('hello');
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                };
~~~~~~~~~~~~~~~~~ [The 'handleNext3' function makes the dependencies of useMemo Hook (at line 358) change on every render. Move it inside the useMemo callback. Alternatively, wrap the 'handleNext3' definition into its own useCallback() Hook.]
                useEffect(() => {
                  handleNext1();
                  return Store.subscribe(() => handleNext1());
                }, [handleNext1]);
                useLayoutEffect(() => {
                  handleNext2();
                  return Store.subscribe(() => handleNext2());
                }, [handleNext2]);
                useMemo(() => {
                  handleNext3();
                  return Store.subscribe(() => handleNext3());
                }, [handleNext3]);
              }



              function MyComponent(props) {
                function handleNext1() {
                ~~~~~~~~~~~~~~~~~~~~~~~~
                  console.log('hello');
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                }
~~~~~~~~~~~~~~~~~ [The 'handleNext1' function makes the dependencies of useEffect Hook (at line 376) change on every render. To fix this, wrap the 'handleNext1' definition into its own useCallback() Hook.]
                const handleNext2 = () => {
                      ~~~~~~~~~~~~~~~~~~~~~
                  console.log('hello');
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                };
~~~~~~~~~~~~~~~~~ [The 'handleNext2' function makes the dependencies of useLayoutEffect Hook (at line 380) change on every render. To fix this, wrap the 'handleNext2' definition into its own useCallback() Hook.]
                let handleNext3 = function() {
                    ~~~~~~~~~~~~~~~~~~~~~~~~~~
                  console.log('hello');
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                };
~~~~~~~~~~~~~~~~~ [The 'handleNext3' function makes the dependencies of useMemo Hook (at line 384) change on every render. To fix this, wrap the 'handleNext3' definition into its own useCallback() Hook.]
                useEffect(() => {
                  handleNext1();
                  return Store.subscribe(() => handleNext1());
                }, [handleNext1]);
                useLayoutEffect(() => {
                  handleNext2();
                  return Store.subscribe(() => handleNext2());
                }, [handleNext2]);
                useMemo(() => {
                  handleNext3();
                  return Store.subscribe(() => handleNext3());
                }, [handleNext3]);
                return (
                  <div
                    onClick={() => {
                      handleNext1();
                      setTimeout(handleNext2);
                      setTimeout(() => {
                        handleNext3();
                      });
                    }}
                  />
                );
              }



              function MyComponent(props) {
                const handleNext1 = () => {
                      ~~~~~~~~~~~~~~~~~~~~~
                      ~~~~~~~~~~~~~~~~~~~~~
                  console.log('hello');
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                };
~~~~~~~~~~~~~~~~~ [The 'handleNext1' function makes the dependencies of useEffect Hook (at line 410) change on every render. To fix this, wrap the 'handleNext1' definition into its own useCallback() Hook.]
~~~~~~~~~~~~~~~~~ [The 'handleNext1' function makes the dependencies of useEffect Hook (at line 414) change on every render. To fix this, wrap the 'handleNext1' definition into its own useCallback() Hook.]
                function handleNext2() {
                ~~~~~~~~~~~~~~~~~~~~~~~~
                ~~~~~~~~~~~~~~~~~~~~~~~~
                  console.log('hello');
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                }
~~~~~~~~~~~~~~~~~ [The 'handleNext2' function makes the dependencies of useEffect Hook (at line 410) change on every render. To fix this, wrap the 'handleNext2' definition into its own useCallback() Hook.]
~~~~~~~~~~~~~~~~~ [The 'handleNext2' function makes the dependencies of useEffect Hook (at line 414) change on every render. To fix this, wrap the 'handleNext2' definition into its own useCallback() Hook.]
                useEffect(() => {
                  return Store.subscribe(handleNext1);
                  return Store.subscribe(handleNext2);
                }, [handleNext1, handleNext2]);
                useEffect(() => {
                  return Store.subscribe(handleNext1);
                  return Store.subscribe(handleNext2);
                }, [handleNext1, handleNext2]);
              }



              function MyComponent(props) {
                let handleNext = () => {
                    ~~~~~~~~~~~~~~~~~~~~
                  console.log('hello');
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                };
~~~~~~~~~~~~~~~~~ [The 'handleNext' function makes the dependencies of useEffect Hook (at line 430) change on every render. To fix this, wrap the 'handleNext' definition into its own useCallback() Hook.]
                if (props.foo) {
                  handleNext = () => {
                    console.log('hello');
                  };
                }
                useEffect(() => {
                  return Store.subscribe(handleNext);
                }, [handleNext]);
              }



              function MyComponent(props) {
                let [, setState] = useState();
                let taint = props.foo;

                function handleNext(value) {
                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  let value2 = value * taint;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  setState(value2);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                  console.log('hello');
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                }
~~~~~~~~~~~~~~~~~ [The 'handleNext' function makes the dependencies of useEffect Hook (at line 447) change on every render. Move it inside the useEffect callback. Alternatively, wrap the 'handleNext' definition into its own useCallback() Hook.]

                useEffect(() => {
                  return Store.subscribe(handleNext);
                }, [handleNext]);
              }



              function Counter({ step }) {
                let [count, setCount] = useState(0);

                function increment(x) {
                ~~~~~~~~~~~~~~~~~~~~~~~
                  return x + step;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
                }
~~~~~~~~~~~~~~~~~ [The 'increment' function makes the dependencies of useEffect Hook (at line 464) change on every render. Move it inside the useEffect callback. Alternatively, wrap the 'increment' definition into its own useCallback() Hook.]

                useEffect(() => {
                  let id = setInterval(() => {
                    setCount(count => increment(count));
                  }, 1000);
                  return () => clearInterval(id);
                }, [increment]);

                return <h1>{count}</h1>;
              }
